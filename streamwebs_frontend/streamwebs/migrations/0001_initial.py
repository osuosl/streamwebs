# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-07-07 15:23
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import streamwebs.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CameraPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(editable=False, max_length=5, null=True)),
                ('cp_date', models.DateField(default=datetime.date.today, verbose_name='date established')),
                ('location', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326, verbose_name='location')),
                ('map_datum', models.CharField(blank=True, max_length=255, verbose_name='map datum')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'camera point',
                'verbose_name_plural': 'camera points',
            },
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Canopy_Cover',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date and time')),
                ('weather', models.CharField(max_length=250, verbose_name='weather')),
                ('north_cc', models.IntegerField(default=0, validators=[streamwebs.models.validate_cover], verbose_name='north canopy cover')),
                ('east_cc', models.IntegerField(default=0, validators=[streamwebs.models.validate_cover], verbose_name='east canopy cover')),
                ('south_cc', models.IntegerField(default=0, validators=[streamwebs.models.validate_cover], verbose_name='south canopy cover')),
                ('west_cc', models.IntegerField(default=0, validators=[streamwebs.models.validate_cover], verbose_name='west canopy cover')),
                ('est_canopy_cover', models.PositiveIntegerField(default=0, validators=[streamwebs.models.validate_total_cover], verbose_name='estimated canopy cover')),
                ('uid', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'canopy cover survey',
                'verbose_name_plural': 'canopy cover surveys',
            },
        ),
        migrations.CreateModel(
            name='Macroinvertebrates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date and time')),
                ('weather', models.CharField(max_length=250, verbose_name='weather')),
                ('time_spent', models.PositiveIntegerField(default=None, null=True, verbose_name='time spent sorting/identifying')),
                ('num_people', models.PositiveIntegerField(default=None, null=True, verbose_name='# of people sorting/identifying')),
                ('water_type', models.CharField(choices=[(None, '-----'), ('riff', 'riffle'), ('pool', 'pool')], default=None, max_length=4, verbose_name='water type')),
                ('notes', models.TextField(blank=True, verbose_name='field notes')),
                ('caddisfly', models.PositiveIntegerField(default=0, verbose_name='caddisfly')),
                ('mayfly', models.PositiveIntegerField(default=0, verbose_name='mayfly')),
                ('riffle_beetle', models.PositiveIntegerField(default=0, verbose_name='riffle beetle')),
                ('stonefly', models.PositiveIntegerField(default=0, verbose_name='stonefly')),
                ('water_penny', models.PositiveIntegerField(default=0, verbose_name='water penny')),
                ('dobsonfly', models.PositiveIntegerField(default=0, verbose_name='dobsonfly')),
                ('sensitive_total', models.PositiveIntegerField(default=0, verbose_name='sensitive total')),
                ('clam_or_mussel', models.PositiveIntegerField(default=0, verbose_name='clam/mussel')),
                ('crane_fly', models.PositiveIntegerField(default=0, verbose_name='crane fly')),
                ('crayfish', models.PositiveIntegerField(default=0, verbose_name='crayfish')),
                ('damselfly', models.PositiveIntegerField(default=0, verbose_name='damselfly')),
                ('dragonfly', models.PositiveIntegerField(default=0, verbose_name='dragonfly')),
                ('scud', models.PositiveIntegerField(default=0, verbose_name='scud')),
                ('fishfly', models.PositiveIntegerField(default=0, verbose_name='fishfly')),
                ('alderfly', models.PositiveIntegerField(default=0, verbose_name='alderfly')),
                ('mite', models.PositiveIntegerField(default=0, verbose_name='mite')),
                ('somewhat_sensitive_total', models.PositiveIntegerField(default=0, verbose_name='somewhat sensitive total')),
                ('aquatic_worm', models.PositiveIntegerField(default=0, verbose_name='aquatic worm')),
                ('blackfly', models.PositiveIntegerField(default=0, verbose_name='blackfly')),
                ('leech', models.PositiveIntegerField(default=0, verbose_name='leech')),
                ('midge', models.PositiveIntegerField(default=0, verbose_name='midge')),
                ('snail', models.PositiveIntegerField(default=0, verbose_name='snail')),
                ('mosquito_larva', models.PositiveIntegerField(default=0, verbose_name='mosquito larva')),
                ('tolerant_total', models.PositiveIntegerField(default=0, verbose_name='tolerant total')),
                ('wq_rating', models.PositiveIntegerField(default=0, verbose_name='water quality rating')),
                ('uid', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'macroinvertebrate',
                'verbose_name_plural': 'macroinvertebrates',
            },
        ),
        migrations.CreateModel(
            name='PhotoPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(editable=False, null=True)),
                ('pp_date', models.DateField(default=datetime.date.today, verbose_name='date established')),
                ('compass_bearing', models.PositiveSmallIntegerField(verbose_name='compass bearing')),
                ('distance', models.DecimalField(decimal_places=0, max_digits=3, verbose_name='distance from camera point')),
                ('camera_height', models.DecimalField(decimal_places=0, max_digits=3, verbose_name='camera height')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('camera_point', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='camera_point', to='streamwebs.CameraPoint')),
            ],
            options={
                'verbose_name': 'photo point',
                'verbose_name_plural': 'photo points',
            },
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PhotoPointImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(null=True, upload_to='pp_photos/', verbose_name='photo')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='date taken')),
                ('photo_point', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photo_point', to='streamwebs.PhotoPoint')),
            ],
            options={
                'verbose_name': 'photo point image',
                'verbose_name_plural': 'photo point images',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('res_type', models.CharField(choices=[(None, '-----'), ('data_sheet', 'Data Sheet'), ('publication', 'Publication'), ('tutorial_video', 'Tutorial Video')], max_length=255)),
                ('downloadable', models.FileField(blank=True, upload_to='assets/')),
                ('thumbnail', models.ImageField(blank=True, upload_to='assets/thumbnails/')),
                ('sort_order', models.PositiveSmallIntegerField(default=1000)),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
            },
        ),
        migrations.CreateModel(
            name='ResourceManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RiparianTransect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date and time')),
                ('weather', models.CharField(blank=True, max_length=255, verbose_name='weather')),
                ('slope', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, verbose_name='slope of stream bank (rise over run)')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('nid', models.PositiveIntegerField(blank=True, null=True)),
                ('uid', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'riparian transect',
                'verbose_name_plural': 'riparian transects',
            },
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('school_type', models.CharField(max_length=250)),
                ('address', models.CharField(blank=True, max_length=250)),
                ('city', models.CharField(blank=True, max_length=250)),
                ('province', models.CharField(blank=True, max_length=250)),
                ('zipcode', models.CharField(blank=True, max_length=250)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SchoolRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.PositiveIntegerField(blank=True, null=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(max_length=250, verbose_name='site name')),
                ('description', models.TextField(blank=True, verbose_name='site description')),
                ('site_slug', models.SlugField(editable=False, unique=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='POINT(-121.3846841 44.0612385)', srid=4326, validators=[streamwebs.models.validate_Site_location], verbose_name='location')),
                ('image', models.ImageField(blank=True, null=True, upload_to='site_photos/', verbose_name='image')),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Soil_Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date and time')),
                ('weather', models.CharField(blank=True, max_length=250, verbose_name='weather')),
                ('landscape_pos', models.CharField(choices=[('summit', 'Summit'), ('slope', 'Slope'), ('depression', 'Depression'), ('large_flat', 'Large Flat Area'), ('stream_bank', 'Stream Bank')], default=None, max_length=11)),
                ('cover_type', models.CharField(choices=[('bare_soil', 'Bare Soil'), ('rocks', 'Rocks'), ('grass', 'Grass'), ('shrubs', 'Shrubs'), ('trees', 'Trees')], default=None, max_length=9)),
                ('land_use', models.CharField(choices=[('urban', 'Urban'), ('agricultural', 'Agricultural'), ('recreation', 'Recreation'), ('wilderness', 'Wilderness'), ('other', 'Other')], default=None, max_length=12)),
                ('distance', models.DecimalField(decimal_places=2, max_digits=5, null=True, verbose_name='distance from stream')),
                ('site_char', models.TextField(blank=True, verbose_name='distinguishing site                                  characteristics')),
                ('soil_type', models.CharField(choices=[(None, '-----'), ('sand', 'Sand'), ('loamy_sand', 'Loamy Sand'), ('silt_loam', 'Silt Loam'), ('loam', 'Loam'), ('clay_loam', 'Clay Loam'), ('light_clay', 'Light Clay'), ('heavy_clay', 'Heavy Clay'), ('n/a', 'N/A'), ('other', 'Other')], default=None, max_length=10)),
                ('uid', models.PositiveIntegerField(blank=True, null=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School', verbose_name='school')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.Site', verbose_name='site')),
            ],
            options={
                'verbose_name': 'soil survey',
                'verbose_name_plural': 'soil surveys',
            },
        ),
        migrations.CreateModel(
            name='TransectZone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_num', models.CharField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=0, max_length=1)),
                ('conifers', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='conifers')),
                ('hardwoods', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='hardwoods')),
                ('shrubs', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='shrubs')),
                ('comments', models.TextField(blank=True, default='', verbose_name='additional comments')),
                ('transect', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transect', to='streamwebs.RiparianTransect')),
            ],
            options={
                'verbose_name': 'zone',
                'verbose_name_plural': 'zones',
            },
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthdate', models.DateField(validators=[streamwebs.models.validate_UserProfile_birthdate], verbose_name='birthdate')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Water_Quality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='date')),
                ('DEQ_dq_level', models.CharField(choices=[(None, '-----'), ('A', 'Level A'), ('B', 'Level B'), ('C', 'Level C'), ('D', 'Level D'), ('E', 'Level E')], default=None, max_length=10, null=True, verbose_name='DEQ data quality level')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True, validators=[streamwebs.models.validate_WaterQuality_latitude], verbose_name='latitude')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True, validators=[streamwebs.models.validate_WaterQuality_longitude], verbose_name='longitude')),
                ('fish_present', models.CharField(choices=[('True', 'Yes'), ('False', 'No')], default=0, max_length=255, null=True, verbose_name='any fish present?')),
                ('live_fish', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='number of live fish')),
                ('dead_fish', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='number of dead fish')),
                ('water_temp_unit', models.CharField(choices=[('Fahrenheit', 'Fahrenheit'), ('Celsius', 'Celsius')], default=0, max_length=255, null=True, verbose_name='water temperature units')),
                ('air_temp_unit', models.CharField(choices=[('Fahrenheit', 'Fahrenheit'), ('Celsius', 'Celsius')], default=0, max_length=255, null=True, verbose_name='air temperature units')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('nid', models.PositiveIntegerField(blank=True, null=True)),
                ('uid', models.PositiveIntegerField(blank=True, null=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School', verbose_name='school')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.Site', verbose_name='Stream/Site name')),
            ],
            options={
                'verbose_name': 'water quality',
                'verbose_name_plural': 'water quality',
            },
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WQ_Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.CharField(choices=[('(Select a sample number)', '(Select a sample number)'), (1, 1), (2, 2), (3, 3), (4, 4)], default=('(Select a sample number)', '(Select a sample number)'), max_length=255, null=True)),
                ('water_temperature', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True, verbose_name='water temperature')),
                ('water_temp_tool', models.CharField(choices=[('N/A', None), ('Manual', 'Manual'), ('Vernier', 'Vernier')], default=0, max_length=255, null=True)),
                ('air_temperature', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True, verbose_name='air temperature')),
                ('air_temp_tool', models.CharField(choices=[('N/A', None), ('Manual', 'Manual'), ('Vernier', 'Vernier')], default=0, max_length=255, null=True)),
                ('dissolved_oxygen', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True, verbose_name='dissolved oxygen (mg/L)')),
                ('oxygen_tool', models.CharField(choices=[('N/A', None), ('Manual', 'Manual'), ('Vernier', 'Vernier')], default=0, max_length=255, null=True)),
                ('pH', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True, validators=[streamwebs.models.validate_pH], verbose_name='pH')),
                ('pH_tool', models.CharField(choices=[('N/A', None), ('Manual', 'Manual'), ('Vernier', 'Vernier')], default=0, max_length=255, null=True)),
                ('turbidity', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True, verbose_name='turbidity (NTU)')),
                ('turbid_tool', models.CharField(choices=[('N/A', None), ('Manual', 'Manual'), ('Vernier', 'Vernier')], default=0, max_length=255, null=True)),
                ('salinity', models.DecimalField(decimal_places=2, default=0, max_digits=5, null=True, verbose_name='salinity (PSU) PPT')),
                ('salt_tool', models.CharField(choices=[('N/A', None), ('Manual', 'Manual'), ('Vernier', 'Vernier')], default=0, max_length=255, null=True)),
                ('conductivity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='conductivity (\xb5S/cm)')),
                ('total_solids', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='total solids (mg/L)')),
                ('bod', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='BOD (mg/L)')),
                ('ammonia', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='ammonia (mg/L)')),
                ('nitrite', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='nitrite (mg/L)')),
                ('nitrate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='nitrate (mg/L)')),
                ('phosphates', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='phosphates (mg/L)')),
                ('fecal_coliform', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='fecal coliform (CFU/100 mL)')),
                ('nid', models.PositiveIntegerField(blank=True, null=True)),
                ('water_quality', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='water_quality', to='streamwebs.Water_Quality')),
            ],
            options={
                'verbose_name': 'water quality sample',
                'verbose_name_plural': 'water quality samples',
            },
            managers=[
                ('test_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='ripariantransect',
            name='school',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='ripariantransect',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.Site', verbose_name='site'),
        ),
        migrations.AddField(
            model_name='macroinvertebrates',
            name='school',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='macroinvertebrates',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.Site'),
        ),
        migrations.AddField(
            model_name='canopy_cover',
            name='school',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.School', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='canopy_cover',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.Site', verbose_name='site'),
        ),
        migrations.AddField(
            model_name='camerapoint',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='streamwebs.Site'),
        ),
    ]
